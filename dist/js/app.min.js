/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/js/app.js":
/*!************************!*\
  !*** ./dist/js/app.js ***!
  \************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nwindow.addEventListener(\"load\", function () {\r\n  const header = document.querySelector(\"header\");\r\n\r\n  const handleScroll = () => {\r\n    window.scrollY > 0 ? header.classList.add(\"scroll\") : header.classList.remove(\"scroll\");\r\n  };\r\n\r\n  handleScroll();\r\n\r\n  // Menu\r\n  let link = document.querySelector(\".header__burger\");\r\n  let menu = document.querySelector(\".header__nav\");\r\n  if (menu) {\r\n    link.addEventListener(\r\n      \"click\",\r\n      function () {\r\n        link.classList.toggle(\"active\");\r\n        menu.classList.toggle(\"open\");\r\n      },\r\n      false\r\n    );\r\n  }\r\n\r\n  // Password\r\n  [].forEach.call( document.querySelectorAll('.toggle-password'),function(button) {\r\n    button.addEventListener('click', () => {\r\n      const label = button.closest('label');\r\n      const input = label.querySelector('input');\r\n\r\n      const isPassword = input.type === 'password';\r\n      input.type = isPassword ? 'text' : 'password';\r\n      button.classList.toggle('visible', isPassword);\r\n    });\r\n  });\r\n\r\n  // Phone\r\n  [].forEach.call( document.querySelectorAll('input[type=\"tel\"]'), function(input) {\r\n    var keyCode;\r\n    function mask(event) {\r\n        event.keyCode && (keyCode = event.keyCode);\r\n        var pos = this.selectionStart;\r\n        if (pos < 3) event.preventDefault();\r\n        var matrix = \"+7 (___) ___ ____\",\r\n            i = 0,\r\n            def = matrix.replace(/\\D/g, \"\"),\r\n            val = this.value.replace(/\\D/g, \"\"),\r\n            new_value = matrix.replace(/[_\\d]/g, function(a) {\r\n                return i < val.length ? val.charAt(i++) || def.charAt(i) : a\r\n            });\r\n        i = new_value.indexOf(\"_\");\r\n        if (i != -1) {\r\n            i < 5 && (i = 3);\r\n            new_value = new_value.slice(0, i)\r\n        }\r\n        var reg = matrix.substring(0, this.value.length).replace(/_+/g,\r\n            function(a) {\r\n                return \"\\\\d{1,\" + a.length + \"}\"\r\n            }).replace(/[+()]/g, \"\\\\$&\");\r\n        reg = new RegExp(\"^\" + reg + \"$\");\r\n        if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;\r\n        if (event.type == \"blur\" && this.value.length < 5)  this.value = \"\"\r\n    }\r\n\r\n    input.addEventListener(\"input\", mask, false);\r\n    input.addEventListener(\"focus\", mask, false);\r\n    input.addEventListener(\"blur\", mask, false);\r\n    input.addEventListener(\"keydown\", mask, false);\r\n  });\r\n\r\n  // Валидация формы\r\n  const cabinetForm = document.querySelector('.cabinet__form');\r\n\r\n  if(cabinetForm) {\r\n    const saveBtn = cabinetForm.querySelector('.cabinet__button.save');\r\n    const cancelBtn = cabinetForm.querySelector('.cabinet__button.cancel');\r\n    const modalBtn = cabinetForm.querySelector('.modal__button');\r\n\r\n    const inputs = Array.from(cabinetForm.querySelectorAll('input'));\r\n    const initialValues = new Map();\r\n\r\n    startValidation()\r\n\r\n    function startValidation() {\r\n      cabinetForm.addEventListener('submit', (event) => {\r\n        if (hasInvalidInput()) {\r\n          event.preventDefault();\r\n          formError();\r\n        } else if (!cabinetForm.classList.contains('modal__form')) {\r\n          event.preventDefault();\r\n          inputs.forEach(input => {\r\n            initialValues.set(input.id, input.value);\r\n          });\r\n          toggleButton();\r\n        } else {\r\n          toggleButton();\r\n        }\r\n      });\r\n      \r\n      inputs.forEach(input => {\r\n        initialValues.set(input.id, input.value);\r\n      });\r\n      \r\n      inputs.forEach((inputElement) => {\r\n        inputElement.addEventListener('input', () => {\r\n          checkInputValidity(inputElement)\r\n          toggleButton()\r\n        })\r\n      })\r\n    }\r\n\r\n    function checkInputValidity(inputElement) {\r\n      if (inputElement.id === 'sum') {\r\n        const rawValue = inputElement.value.replace(/\\s/g, '');\r\n        const numericValue = parseInt(rawValue, 10);\r\n        const minValue = parseInt(inputElement.dataset.min, 10);\r\n\r\n        if (isNaN(numericValue) || numericValue < minValue) {\r\n          inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n        } else {\r\n          inputElement.setCustomValidity('');\r\n        }\r\n      } else if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n      } else {\r\n        inputElement.setCustomValidity(checkLengthMismatch(inputElement));\r\n      }\r\n\r\n      const passwordOld = document.getElementById('password-old');\r\n      const passwordNew = document.getElementById('password-new');\r\n      const passwordRepeat = document.getElementById('password-repeat');\r\n\r\n      if (inputElement.id === 'password-old') {\r\n        if (!validatePassword(inputElement.value)) {\r\n          inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n        } else {\r\n          inputElement.setCustomValidity('');\r\n        }\r\n      }\r\n\r\n      if (inputElement.id === 'password-new') {\r\n        if (!validatePassword(inputElement.value)) {\r\n          inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n        } else if (inputElement.value === passwordOld.value) {\r\n          inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n        } else {\r\n          inputElement.setCustomValidity('');\r\n        }\r\n      }\r\n\r\n      // Проверка повтора пароля: должен совпадать с новым\r\n      if (inputElement.id === 'password-repeat') {\r\n        if (inputElement.value !== passwordNew.value) {\r\n          inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n        } else {\r\n          inputElement.setCustomValidity('');\r\n        }\r\n      }\r\n\r\n      // Обновление отображения ошибок\r\n      if (!inputElement.validity.valid) {\r\n        toggleErrorSpan(inputElement, inputElement.validationMessage);\r\n      } else {\r\n        toggleErrorSpan(inputElement);\r\n      }\r\n    }\r\n\r\n    function validatePassword(password) {\r\n      // Проверяем, содержит ли пароль минимум 8 символов, цифры, буквы верхнего и нижнего регистров, а также специальные символы\r\n      const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+[\\]{};':\"\\\\|,.<>/?-]).{8,}$/;\r\n      return passwordRegex.test(password);\r\n    }\r\n\r\n    function checkLengthMismatch(inputElement) {\r\n      if (inputElement.type !== 'text') {\r\n        return ''\r\n      }\r\n      const valueLength = inputElement.value.trim().length\r\n      if (valueLength < inputElement.minLength) {\r\n        return `${inputElement.dataset.errorMessage}  ${inputElement.minLength}`\r\n      }\r\n      return ''\r\n    }\r\n\r\n    function hasInvalidInput() {\r\n      return inputs.some((inputElement) => {\r\n        return !inputElement.validity.valid\r\n      })\r\n    }\r\n\r\n    function toggleErrorSpan(inputElement, errorMessage) {\r\n      const errorElement = document.querySelector(`#${inputElement.id}-error`)\r\n      if (errorMessage) {\r\n        inputElement.classList.add('invalid');\r\n        errorElement.classList.add('invalid');\r\n        errorElement.textContent = errorMessage;\r\n      } else {\r\n        inputElement.classList.remove('invalid');\r\n        errorElement.classList.remove('invalid');\r\n        errorElement.textContent = '';\r\n      }\r\n    }\r\n\r\n    function toggleButton() {\r\n      const changed = isFormChanged();\r\n      cancelBtn ? cancelBtn.disabled = !changed : false;\r\n      saveBtn ? saveBtn.disabled = !changed || hasInvalidInput() : false;\r\n      modalBtn ? modalBtn.disabled = !changed || hasInvalidInput() : false;\r\n    }\r\n\r\n    function formError() {\r\n      // formErrorElement.textContent = formErrorElement.dataset.errorMessage;\r\n      inputs.forEach((inputElement) => {\r\n        if (inputElement.required && inputElement.value.trim() === '') {\r\n          inputElement.classList.add('invalid');\r\n        } else {\r\n          inputElement.classList.remove('invalid');\r\n        }\r\n      });\r\n    }\r\n\r\n    function isFormChanged() {\r\n      return inputs.some(input => input.value !== initialValues.get(input.id));\r\n    }\r\n\r\n    if(cancelBtn) {\r\n      cancelBtn.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        inputs.forEach(input => {\r\n          input.value = initialValues.get(input.id);\r\n          toggleErrorSpan(input);\r\n        });\r\n        toggleButton();\r\n      });\r\n    }\r\n  }\r\n\r\n  // Animation\r\n  const { animate, scroll } = Motion;\r\n\r\n  document.querySelectorAll(\".fade-in\").forEach((el) => {\r\n    const delay = parseFloat(el.dataset.delay || \"0\");\r\n\r\n    animate(\r\n      el,\r\n      { opacity: [0, 1], transform: [\"translateY(50px)\", \"translateY(0)\"] },\r\n      { duration: 1, delay, easing: \"ease-out\" }\r\n    );\r\n  });\r\n\r\n  document.querySelectorAll(\".fade-down\").forEach((el) => {\r\n    const delay = parseFloat(el.dataset.delay || \"0\");\r\n\r\n    animate(\r\n      el,\r\n      { opacity: [0, 1], transform: [\"translateY(-50px)\", \"translateY(0)\"] },\r\n      { duration: 1, delay, easing: \"ease-out\" }\r\n    );\r\n  });\r\n\r\n  document.querySelectorAll(\".fade-left\").forEach((el) => {\r\n    const delay = parseFloat(el.dataset.delay || \"0\");\r\n\r\n    animate(\r\n      el,\r\n      { opacity: [0, 1], transform: [\"translateX(-50px)\", \"translateY(0)\"] },\r\n      { duration: 1, delay, easing: \"ease-out\" }\r\n    );\r\n  });\r\n\r\n  const observer = new IntersectionObserver((entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        animate(entry.target, { opacity: 1, transform: \"translateY(0)\" }, { duration: 0.8, easing: \"ease-out\" });\r\n        observer.unobserve(entry.target); // одноразовая анимация\r\n      }\r\n    });\r\n  }, { threshold: 0.2 });\r\n\r\n  document.querySelectorAll(\".scroll-animate\").forEach((el) => observer.observe(el));\r\n\r\n  // Form\r\n\r\n  const searchForm = document.querySelector('.search-form');\r\n  if (searchForm) {\r\n    searchForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n    });\r\n  }\r\n\r\n  // Search\r\n  const search = document.querySelector('#search');\r\n  const searchTable = document.querySelector('.table-search');\r\n\r\n  if(search && searchTable) {\r\n    function filterTable() {\r\n      const filter = search.value.toUpperCase();\r\n      const rows = searchTable.querySelectorAll('.table__body .table__row');\r\n      let visibleCount = 0;\r\n\r\n      for (let i = 0; i < rows.length; i++) {\r\n        const cells = rows[i].getElementsByTagName(\"div\");\r\n        let match = false;\r\n\r\n        for (let j = 0; j < cells.length; j++) {\r\n          if (cells[j].textContent.toUpperCase().includes(filter)) {\r\n            match = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (match) {\r\n          rows[i].classList.remove(\"hide\");\r\n          visibleCount++;\r\n        } else {\r\n          rows[i].classList.add(\"hide\");\r\n        }\r\n      }\r\n    }\r\n\r\n    search.addEventListener(\"input\", function() {\r\n      filterTable();\r\n    });\r\n  }\r\n\r\n  // Show More\r\n  const showMore = document.querySelector('.cabinet__button.show');\r\n  const hiddenRows = () => document.querySelectorAll('.table__row.hidden');\r\n  const ShowPerClick = 2;\r\n\r\n  if(showMore && hiddenRows) {\r\n    showMore.addEventListener('click', function () {\r\n      const rows = hiddenRows();\r\n\r\n      if (rows.length === 0) {\r\n        showMore.style.display = 'none';\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < Math.min(ShowPerClick, rows.length); i++) {\r\n        rows[i].classList.remove('hidden');\r\n      }\r\n\r\n      if (hiddenRows().length === 0) {\r\n        showMore.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Quantity\r\n\r\n  const materialsRows = document.querySelectorAll('.table-materials .table__row');\r\n  const totalAmount = document.querySelector('.cabinet__amount span');\r\n\r\n  const updateTotal = () => {\r\n    let sum = 0;\r\n    materialsRows.forEach(row => {\r\n      const countEl = row.querySelector('.table__quantity span');\r\n      const count = parseInt(countEl.textContent, 10);\r\n      sum += count;\r\n\r\n      if (count > 0) {\r\n        row.classList.add('active');\r\n      } else {\r\n        row.classList.remove('active');\r\n      }\r\n    });\r\n\r\n    if(totalAmount) {\r\n      totalAmount.textContent = sum;\r\n    }\r\n  };\r\n\r\n  if(materialsRows) {\r\n    materialsRows.forEach(row => {\r\n      const minusBtn = row.querySelector('.button.minus');\r\n      const plusBtn = row.querySelector('.button.plus');\r\n      const countEl = row.querySelector('.table__quantity span');\r\n\r\n      minusBtn.addEventListener('click', () => {\r\n        let value = parseInt(countEl.textContent, 10);\r\n        if (value > 0) {\r\n          value--;\r\n          countEl.textContent = value;\r\n          updateTotal();\r\n        }\r\n      });\r\n\r\n      plusBtn.addEventListener('click', () => {\r\n        let value = parseInt(countEl.textContent, 10);\r\n        value++;\r\n        countEl.textContent = value;\r\n        updateTotal();\r\n      });\r\n    });\r\n    updateTotal();\r\n  }\r\n\r\n\r\n  // Modal\r\n\r\n  function hideModal(modal) {\r\n    modal.addEventListener('click', function(e) {\r\n      const target = e.target;\r\n      if (\r\n        target.classList.contains(\"modal__close\") ||\r\n        target.classList.contains(\"modals\") ||\r\n        target.classList.contains(\"close\")\r\n      ) {\r\n        modal.style.transition = \"opacity 0.4s\";\r\n        modal.style.opacity = \"0\";\r\n        setTimeout(() => {\r\n          modal.style.display = \"none\";\r\n        }, 400);\r\n      }\r\n    });\r\n  }\r\n\r\n  function showModal(modal) {\r\n    modal.style.display = \"flex\";\r\n    setTimeout(() => {\r\n      modal.style.transition = \"opacity 0.4s\";\r\n      modal.style.opacity = \"1\";\r\n    }, 10);\r\n  } \r\n\r\n  let modals = document.querySelector('.modals')\r\n  let modalAll = document.querySelectorAll('.modal')\r\n  let modalBtns = document.querySelectorAll(\".modal-btn\");\r\n\r\n  if(modals && modalBtns){\r\n    hideModal(modals);\r\n    modalBtns.forEach( btn => {\r\n      btn.addEventListener('click', () => {\r\n        showModal(modals)\r\n        let typeBtn = btn.dataset.type;\r\n        modalAll.forEach( modal => {\r\n          let typeModal = modal.dataset.type;\r\n          modal.style.display = 'none'\r\n          if(typeBtn == typeModal) {\r\n            modal.style.display = 'block'\r\n          }\r\n        });\r\n      })\r\n    })\r\n  }\r\n\r\n  // Listener\r\n\r\n  document.addEventListener(\"click\", (e) => {\r\n    let target = e.target;\r\n    if (\r\n      !target.classList.contains(\"header__nav\") &&\r\n      !target.classList.contains(\"header__burger\")\r\n    ) {\r\n      link.classList.remove(\"active\");\r\n      menu.classList.remove(\"open\");\r\n    }\r\n  });\r\n\r\n  window.addEventListener(\"scroll\", () => {\r\n    handleScroll();\r\n    if (menu.classList.contains(\"open\")) {\r\n      link.classList.remove(\"active\");\r\n      menu.classList.remove(\"open\");\r\n    }\r\n  });\r\n});\n\n//# sourceURL=webpack://gulp-2022/./dist/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;